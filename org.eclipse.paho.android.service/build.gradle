apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 33
        testApplicationId "org.eclipse.paho.android.service.test"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lint {
        abortOnError false
    }
}

repositories {
    google()
    mavenCentral()
    maven { url rootProject.ext.mavenUrl }
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation "org.eclipse.paho:org.eclipse.paho.client.mqttv3:${rootProject.ext.clientVersion}"
    implementation "androidx.legacy:legacy-support-v4:${rootProject.ext.supportLibVersion}"
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}

// Generate Sources Jar
task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

// Copy the Paho Java client into the libs directory
task copyLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
    include 'org.eclipse.paho*'
}

// Rename Release AAR to Maven convention
task renameReleaseAAR(type: Copy) {
    from("$buildDir/outputs/aar")
    into("$buildDir/outputs/aar/")
    include('org.eclipse.paho.android.service-debug.aar')
    rename('org.eclipse.paho.android.service-debug.aar',
            "${rootProject.ext.serviceArchivesBaseName}-${rootProject.ext.serviceVersion}.aar")
}

// Generate Plain Jar Version of library
task generateLibraryJar(type: Jar) {
    from("$buildDir/intermediates/javac/release/classes") // updated path for Gradle 7+
}

// Generate Javadoc Jar
task generateJavaDocJar(type: Jar) {
    doFirst {
        android.libraryVariants.all { variant ->
            if (variant.buildType.name == 'release') {
                def javaCompileTask = variant.javaCompileProvider.get()
                javaCompileTask.options.compilerArgs += ['-Xdoclint:none']
                javaCompileTask.doLast {
                    println "Javadoc generation ready for ${variant.name}"
                }
            }
        }
    }
    from("$buildDir/docs/javadoc")
    archiveClassifier.set('javadoc')
}

publishing {
    publications {
        paho(MavenPublication) {
            groupId = 'org.eclipse.paho'
            artifact(generateSourcesJar)
            artifact(generateLibraryJar)
            artifact(generateJavaDocJar)
            artifact("$buildDir/outputs/aar/${rootProject.ext.serviceArchivesBaseName}-${rootProject.ext.serviceVersion}.aar")
        }
    }
    repositories {
        if (project.hasProperty('eclipseRepoUsername')) {
            maven {
                name = 'eclipse'
                url = uri("https://repo.eclipse.org/content/repositories/paho-${rootProject.ext.serviceVersion.endsWith('-SNAPSHOT') ? 'snapshots/' : 'releases/'}")
                credentials {
                    username = eclipseRepoUsername
                    password = eclipseRepoPassword
                }
            }
        } else {
            maven { url = uri("$buildDir/repo") }
        }
    }
}

// Debug dependencies
tasks.register("debugDeps") {
    doLast { configurations.implementation.each { println it } }
}

// Copy libs and rename AAR after build
tasks.named('clean') {
    doFirst { delete 'libs' }
    doLast { tasks.named('copyLibs').get().execute() }
}

tasks.named('assemble') {
    doLast { tasks.named('renameReleaseAAR').get().execute() }
}
