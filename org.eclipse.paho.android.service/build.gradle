apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 33
        testApplicationId "org.eclipse.paho.android.service.test"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lint {
        abortOnError false
    }
}

repositories {
    google()
    mavenCentral()
    maven { url rootProject.ext.mavenUrl }
    maven { url "https://jitpack.io" }
}

dependencies {
    // Create a separate configuration for copying jars
    copyLibsConfig "org.eclipse.paho:org.eclipse.paho.client.mqttv3:${rootProject.ext.clientVersion}"
}




// Generate Sources Jar
task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

// Copy the Paho Java client into the libs directory
configurations {
    copyLibsConfig
}

// Rename Release AAR to Maven convention
task renameReleaseAAR(type: Copy) {
    from("$buildDir/outputs/aar")
    into("$buildDir/outputs/aar/")
    include('org.eclipse.paho.android.service-release.aar') // use release variant
    rename('org.eclipse.paho.android.service-release.aar',
            "${rootProject.ext.serviceArchivesBaseName}-${rootProject.ext.serviceVersion}.aar")
}

// Generate Plain Jar Version of library
task generateLibraryJar(type: Jar) {
    from("$buildDir/intermediates/javac/release/classes") // Gradle 7+
    archiveClassifier.set('classes')
}

// Generate Javadoc Jar
task generateJavaDocJar(type: Jar) {
    from("$buildDir/docs/javadoc")
    archiveClassifier.set('javadoc')
}

publishing {
    publications {
        paho(MavenPublication) {
            groupId = 'org.eclipse.paho'
            artifact(generateSourcesJar)
            artifact(generateLibraryJar)
            artifact(generateJavaDocJar)
            artifact("$buildDir/outputs/aar/${rootProject.ext.serviceArchivesBaseName}-${rootProject.ext.serviceVersion}.aar")
        }
    }
    repositories {
        if (project.hasProperty('eclipseRepoUsername')) {
            maven {
                name = 'eclipse'
                url = uri("https://repo.eclipse.org/content/repositories/paho-${rootProject.ext.serviceVersion.endsWith('-SNAPSHOT') ? 'snapshots/' : 'releases/'}")
                credentials {
                    username = eclipseRepoUsername
                    password = eclipseRepoPassword
                }
            }
        } else {
            maven { url = uri("$buildDir/repo") }
        }
    }
}

// Debug dependencies
tasks.register("debugDeps") {
    doLast { configurations.runtimeClasspath.each { println it } }
}

// Wire tasks correctly instead of using execute()
tasks.named('assemble') {
    dependsOn copyLibs
    finalizedBy renameReleaseAAR
}

tasks.named('clean') {
    doFirst { delete 'libs' }
}
